package pokeClone;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.awt.event.WindowEvent;
import java.util.ArrayList;

import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.Timer;

public class Game implements ActionListener, KeyListener {

	// Global Constants
	public static final int FIELD_WIDTH = 608;
	public static final int FIELD_HEIGHT = 416;

	// Local Constants
	private final int TIMER_SPEED = 10;
	private final int TIMER_DELAY = 750;

	public static int mapTopRow = 0;
	public static int mapLeftColumn = 0;

	private JFrame gameFrame;
	private Timer timer;

	private static boolean esc = false;
	private static int time = 0;
	// These Images could be loaded without the use of the 'getClass' and
	// 'getResource'
	// methods, but using those two methods allows all of the files that make up
	// this
	// program (the .CLASS files and the graphics files) to be put into a single
	// .JAR
	// file and then loaded and run directly from that (executable) file; in
	// addition,
	// a benefit of using the 'ImageIcon' class is that, unlike some of the
	// other
	// file-loading classes, the 'ImageIcon' class fully loads the Image when
	// the
	// object is created, making it possible to immediately determine and use
	// the
	// dimensions of the Image
	private ArrayList<ImageIcon> playerImages = new ArrayList<ImageIcon>();

	private ImageIcon tile = new ImageIcon(getClass().getResource("GrassTileBasic.png"));
	private ImageIcon player = new ImageIcon(getClass().getResource("testing.png"));

	private JLabel lblPlayer = new JLabel(player);
	private int playerX, playerY, playerDir = 270;

	private boolean pressedLeft = false, pressedRight = false, pressedSpace = false, pressedUp = false,
			pressedDown = false;
	private boolean controlKeyPressed = false;

	private Font aFont = new Font("Helvetica", Font.BOLD, 24);

	// Create ArrayLists to hold the 'Alien' objects (all types) and the
	// 'Missile'
	// objects that will be used throughout the game
	private ArrayList<Tile> tiles = new ArrayList<Tile>();
	private ArrayList<JLabel> tileLabels = new ArrayList<JLabel>();

	private Font fonto = new Font("Arial", Font.BOLD, 32);

	private boolean soundOn = true;

	public static void main(String[] args) {
		new Game();
	}

	public Game() {
		// for (int i = 0; i < 10; i++) {
		// playerImages.add(new ImageIcon(getClass().getResource("player" + i +
		// ".png")));
		// }

		gameFrame = new JFrame();

		// Set the background image and other JFrame properties
		gameFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		gameFrame.setSize(FIELD_WIDTH, FIELD_HEIGHT + 18);
		gameFrame.setTitle("Testing");
		gameFrame.setLocationRelativeTo(null);
		gameFrame.setResizable(false);
		gameFrame.setFocusable(true);

		JMenuBar menuBar = new JMenuBar();

		JMenu fileMenu = new JMenu("File");
		JMenu editMenu = new JMenu("Edit");

		JMenuItem exitMenuItem = new JMenuItem("Quit");
		exitMenuItem.setActionCommand("quit");
		exitMenuItem.addActionListener(this);

		JMenuItem soundMenuItem = new JMenuItem("Toggle Sound");
		soundMenuItem.setActionCommand("sound");
		soundMenuItem.addActionListener(this);

		fileMenu.add(exitMenuItem);
		editMenu.add(soundMenuItem);
		menuBar.add(fileMenu);
		menuBar.add(editMenu);
		gameFrame.setJMenuBar(menuBar);

		gameFrame.setVisible(true);

		for (int i = 0; i < 13; i++) {
			for (int j = 0; j < 19; j++) {
				tiles.add(new Tile("GrassTileBasic.png", 32, 32, i, j));

				Tile temp = tiles.get(tiles.size() - 1);

				tileLabels.add(new JLabel(temp.img));
				tileLabels.get(tileLabels.size() - 1).setSize(temp.clipSizeWidth, temp.clipSizeHeight);
				tileLabels.get(tileLabels.size() - 1).setLocation((temp.mapColumn - mapLeftColumn) * temp.clipSizeWidth,
						(temp.mapRow - mapTopRow) * temp.clipSizeHeight);
				tileLabels.get(tileLabels.size() - 1).setVisible(true);

				gameFrame.add(tileLabels.get(tileLabels.size() - 1));
			}
		}

		timer = new Timer(TIMER_SPEED, this);
		timer.setInitialDelay(TIMER_DELAY);
		timer.setActionCommand("timer");
		timer.start();

		lblPlayer.setSize(player.getIconWidth(), player.getIconHeight());
		lblPlayer.setLocation(playerX, playerY);
		lblPlayer.setVisible(true);

		gameFrame.add(lblPlayer);
	}

	private void drawBackground() {
		for (int i = 0; i < tileLabels.size(); i++) {
			tileLabels.get(i).setIcon(tiles.get(i).img);
		}
	}

	@Override
	public void actionPerformed(ActionEvent e) {
		if (e.getActionCommand().equals("quit")) {
			gameFrame.dispatchEvent(new WindowEvent(gameFrame, WindowEvent.WINDOW_CLOSING));
		}

		drawBackground();
		lblPlayer.repaint();

		gameFrame.repaint();
		
		if (pressedRight) {
			playerX += 10;
		}
		
		if (pressedLeft) {
			playerX -= 10;
		}
		
		if (pressedUp) {
			playerY -= 10;
		}
		
		if (pressedDown) {
			playerY += 10;
		}
		
		System.out.println("X: " + playerX + ", Y: " + playerY);
	}
	
	@Override
	public void keyTyped(KeyEvent e) {
		System.out.println("yoyoyoyoyoyoyoyoyoyoyoyo");
	}

	@Override
	public void keyPressed(KeyEvent e) {
		System.out.println("\n\ntesting\n\n");
		int key = e.getKeyCode();

		if (key == KeyEvent.VK_RIGHT) {
			pressedRight = true;
		}

		if (key == KeyEvent.VK_UP) {
			pressedUp = true;
		}

		if (key == KeyEvent.VK_DOWN) {
			pressedDown = true;
		}

		if (key == KeyEvent.VK_LEFT) {
			pressedLeft = true;
		}
	}

	@Override
	public void keyReleased(KeyEvent e) {
		System.out.println("\nboo\n");
		int key = e.getKeyCode();

		if (key == KeyEvent.VK_RIGHT) {
			pressedRight = false;
		}

		if (key == KeyEvent.VK_UP) {
			pressedUp = false;
		}

		if (key == KeyEvent.VK_DOWN) {
			pressedDown = false;
		}

		if (key == KeyEvent.VK_LEFT) {
			pressedLeft = false;
		}
	}
}
